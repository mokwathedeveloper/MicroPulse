version: '3.8'

services:
  # Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: micropulse-rabbitmq-prod
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-secure_password}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - micropulse-network
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: micropulse-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - micropulse-network
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile.prod
    container_name: micropulse-api-gateway-prod
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - PORT=8000
    env_file:
      - .env.production
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - micropulse-network
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # User Service
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile.prod
    container_name: micropulse-user-service-prod
    environment:
      - NODE_ENV=production
      - PORT=8001
    env_file:
      - .env.production
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - micropulse-network
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Product Service
  product-service:
    build:
      context: ./services/product-service
      dockerfile: Dockerfile.prod
    container_name: micropulse-product-service-prod
    environment:
      - NODE_ENV=production
      - PORT=8002
    env_file:
      - .env.production
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - micropulse-network
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Order Service
  order-service:
    build:
      context: ./services/order-service
      dockerfile: Dockerfile.prod
    container_name: micropulse-order-service-prod
    environment:
      - NODE_ENV=production
      - PORT=8003
    env_file:
      - .env.production
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - micropulse-network
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Inventory Service
  inventory-service:
    build:
      context: ./services/inventory-service
      dockerfile: Dockerfile.prod
    container_name: micropulse-inventory-service-prod
    environment:
      - NODE_ENV=production
      - PORT=8004
    env_file:
      - .env.production
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - micropulse-network
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: micropulse-frontend-prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${API_GATEWAY_URL:-http://localhost:8000}
    networks:
      - micropulse-network
    restart: always
    depends_on:
      - api-gateway
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: micropulse-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - api-gateway
    networks:
      - micropulse-network
    restart: always

volumes:
  rabbitmq_data:
  redis_data:

networks:
  micropulse-network:
    driver: bridge
