version: '3.8'

services:
  # Database
  mongodb:
    image: mongo:7.0
    container_name: micropulse-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: micropulse
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - micropulse-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: micropulse-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - micropulse-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: micropulse-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - micropulse-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: micropulse-api-gateway
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=development
      - PORT=8000
    env_file:
      - .env
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/api-gateway:/app
      - /app/node_modules
    networks:
      - micropulse-network
    restart: unless-stopped

  # User Service
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: micropulse-user-service
    ports:
      - "8001:8001"
    environment:
      - NODE_ENV=development
      - PORT=8001
    env_file:
      - .env
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/user-service:/app
      - /app/node_modules
    networks:
      - micropulse-network
    restart: unless-stopped

  # Product Service
  product-service:
    build:
      context: ./services/product-service
      dockerfile: Dockerfile
    container_name: micropulse-product-service
    ports:
      - "8002:8002"
    environment:
      - NODE_ENV=development
      - PORT=8002
    env_file:
      - .env
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/product-service:/app
      - /app/node_modules
    networks:
      - micropulse-network
    restart: unless-stopped

  # Order Service
  order-service:
    build:
      context: ./services/order-service
      dockerfile: Dockerfile
    container_name: micropulse-order-service
    ports:
      - "8003:8003"
    environment:
      - NODE_ENV=development
      - PORT=8003
    env_file:
      - .env
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/order-service:/app
      - /app/node_modules
    networks:
      - micropulse-network
    restart: unless-stopped

  # Inventory Service
  inventory-service:
    build:
      context: ./services/inventory-service
      dockerfile: Dockerfile
    container_name: micropulse-inventory-service
    ports:
      - "8004:8004"
    environment:
      - NODE_ENV=development
      - PORT=8004
    env_file:
      - .env
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/inventory-service:/app
      - /app/node_modules
    networks:
      - micropulse-network
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: micropulse-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - micropulse-network
    restart: unless-stopped
    depends_on:
      - api-gateway

volumes:
  mongodb_data:
  rabbitmq_data:
  redis_data:

networks:
  micropulse-network:
    driver: bridge
